---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Tag from "@comps/Tag.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { pubDate, tags, description, title } = post.data;
const { Content, remarkPluginFrontmatter } = await post.render();

const formatDate = (date: Date) =>
  date.toLocaleString("en-GB", {
    dateStyle: "medium",
    timeStyle: "short",
  });

function formatReadTime(minutes: number) {
  return `${Math.ceil(minutes)} minute${minutes > 1 ? "s" : ""} read`;
}
---

<Layout {...post.data}>
  <header class="article-header" slot="title">
    <ul class="article-tags" slot="title">
      {
        tags.map((tag) => (
          <li class="tag">
            <Tag>
              <a class="tag-link" href={`/blog/?tags=${tag}`}>
                {tag}
              </a>
            </Tag>
          </li>
        ))
      }
    </ul>
    <h1>{title}</h1>
    <div class="article-subheader">
      <span class="article-description">{description}</span>
      <div class="article-info">
        <span class="article-readtime"
          >{formatReadTime(remarkPluginFrontmatter.readingTime.minutes)}</span
        >
        Â·
        <span class="article-pubdate"
          ><time datetime={pubDate.toISOString()}>{formatDate(pubDate)}</time
          ></span
        >
      </div>
    </div>
  </header>
  <Content />
</Layout>

<style>
  .article-subheader {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-gap);
  }

  .article-info {
    font-size: smaller;
    color: rgb(var(--color-subtext1));
  }

  .article-tags {
    all: unset;
    display: flex;
    gap: var(--spacing-gap);
    flex-wrap: wrap;

    li {
      all: unset;
    }
  }

  .tag-link {
    text-decoration: none;
  }
</style>

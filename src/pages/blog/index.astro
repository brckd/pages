---
import Layout from "@layouts/Layout.astro";
import Tag from "@comps/Tag.astro";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";

export const prerender = false;

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
const formatDate = (date: Date) =>
  date.toLocaleString("en-GB", {
    dateStyle: "medium",
    timeStyle: "short",
  });

const currentTags = new Set(
  Astro.url.searchParams
    .get("tags")
    ?.split(";")
    .filter((tag) => tag) ?? [],
);
const otherTags = new Set(posts.flatMap((post) => post.data.tags)).difference(
  currentTags,
);
const filteredPosts = currentTags.size
  ? posts.filter((post) => currentTags.isSubsetOf(new Set(post.data.tags)))
  : posts;

const withoutTag = (tag: string) =>
  `/blog/?tags=${[...currentTags.difference(new Set([tag]))].join(";")}`;
const withTag = (tag: string) => `?tags=${[...currentTags, tag].join(";")}`;

function formatReadTime(minutes: number) {
  return `${Math.ceil(minutes)} minute${minutes > 1 ? "s" : ""} read`;
}
---

<Layout title="Blog">
  <ul class="tags">
    {
      [...currentTags].map((tag) => (
        <li class="tag">
          <Tag selected>
            <a class="tag-link" href={withoutTag(tag)}>
              {tag}
            </a>
          </Tag>
        </li>
      ))
    }

    {
      [...otherTags].map((tag) => (
        <li class="tag">
          <Tag selected={false}>
            <a class="tag-link" href={withTag(tag)}>
              {tag}
            </a>
          </Tag>
        </li>
      ))
    }
  </ul>

  <div class="article-list">
    {
      filteredPosts.map(async ({ slug, data, render }) => (
        <article class="article-card">
          <header class="article-header">
            <ul class="article-tags">
              {data.tags
                .filter((tag) => currentTags.has(tag))
                .map((tag) => (
                  <li class="tag">
                    <Tag selected>
                      <a class="tag-link" href={withoutTag(tag)}>
                        {tag}
                      </a>
                    </Tag>
                  </li>
                ))}
              {data.tags
                .filter((tag) => !currentTags.has(tag))
                .map((tag) => (
                  <li class="tag">
                    <Tag>
                      <a class="tag-link" href={withTag(tag)}>
                        {tag}
                      </a>
                    </Tag>
                  </li>
                ))}
            </ul>
            <a class="article-link" href={`/blog/${slug}`}>
              <h2>{data.title}</h2>
            </a>
          </header>
          <span class="article-description">{data.description}</span>
          {data.banner && (
            <div class="article-banner">
              <Image src={data.banner} width={600} alt={data.bannerAlt} />
            </div>
          )}
          <header class="article-info">
            <span class="article-readtime">
              {formatReadTime(
                (await render()).remarkPluginFrontmatter.readingTime.minutes,
              )}
            </span>
            Â·
            <span class="article-pubdate">
              published
              <time datetime={data.pubDate.toISOString()}>
                {formatDate(data.pubDate)}
              </time>
            </span>
          </header>
        </article>
      ))
    }
  </div>
</Layout>

<style>
  h2 {
    margin: 0;
  }

  .article-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-gap);
    margin-top: var(--spacing-gap);
  }

  .article-card {
    display: grid;
    flex-direction: column;
    grid-template-columns: 3fr 2fr;
    gap: var(--spacing-gap);
    background: rgb(var(--color-mantle));
    padding: var(--spacing-padding);
    border-radius: var(--radius-layout);

    > :global(*) {
      --color-mantle: var(--color-crust);
      grid-column: 1;
    }

    &:not(:has(.article-banner)) {
      display: flex;
    }
  }

  @media (max-width: 600px) {
    .article-card {
      display: flex;
    }
  }

  .article-header {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-gap);
  }

  .article-info {
    font-size: smaller;
    color: rgb(var(--color-subtext1));
  }

  .article-link {
    text-decoration: none;
  }

  .article-banner {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: rgb(var(--color-mantle));
    overflow: hidden;
    border-radius: var(--radius-layout);
    grid-column: 2;
    grid-row: 1 / span 3;

    img {
      object-fit: cover;
      max-height: 160px;
      width: 100%;
      height: 100%;
    }
  }

  @media (max-width: 600px) {
    .article-banner img {
      max-width: 600px;
      max-height: 200px;
      height: auto;
    }
  }

  .tags,
  .article-tags {
    all: unset;
    display: flex;
    gap: var(--spacing-gap);
    flex-wrap: wrap;

    li {
      all: unset;
    }
  }

  .tag-link {
    text-decoration: none;
  }
</style>

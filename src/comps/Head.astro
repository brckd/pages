---
import { SITE_TITLE, SITE_DESCRIPTION, THEME_COLOR } from "@src/consts";
import { getImage } from "astro:assets";
import { type GetImageResult } from "astro/dist/assets/types";
import icon from "@assets/icons/icon.png";

interface Props {
  title?: string;
  description?: string;
}

const { title = "", description = SITE_DESCRIPTION } = Astro.props;
let longTitle = title;
if (longTitle) longTitle += " - ";
longTitle += SITE_TITLE;

const image = await getImage({
  src: icon,
  height: 1200,
});

function getIconAttributes(icon: GetImageResult) {
  return {
    src: icon.src,
    type: `image/${icon.options.format}`,
    sizes: `${icon.options.width}x${icon.options.height}`,
  };
}

const iconSizes = [192, 512];
const icons = await Promise.all(
  iconSizes.map((size) =>
    getImage({ src: icon, width: size, height: size, format: "png" }),
  ),
);
---

<!-- General -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="generator" content={Astro.generator} />

<title>{longTitle}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="theme-color" content={THEME_COLOR} />

<!-- Open Graph -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:site_name" content={SITE_TITLE} />
<meta property="og:image" content={image.src} />

<meta property="twitter:card" content="summary" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />

<!-- Social -->
<link rel="me" href="https://tilde.zone/@bricked" />
<link
  rel="alternate"
  type="application/rss+xml"
  title={SITE_TITLE}
  href={new URL("/blog/rss.xml", Astro.site)}
/>

<!-- Style -->
<link rel="manifest" href="/manifest.webmanifest" />
<link
  rel="apple-touch-icon"
  {...getIconAttributes(
    await getImage({ src: icon, format: "png", width: 180, height: 180 }),
  )}
/>
<link rel="icon" type="image/x-icon" href="/favicon.ico" />
{icons.map((icon) => <link rel="icon" {...getIconAttributes(icon)} />)}
